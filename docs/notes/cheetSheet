######      AUTOWIRE    #####

___Spring Autowire byName___

Concept:
autowire="byName" automatically wires dependencies based on matching bean id in XML and property name in the Java class.

How byName works step by step:
1Ô∏è‚É£ When we call:
    Car myCar = (Car) context.getBean("myCar");
    Spring looks for bean id myCar in XML and creates a Car object.

 2Ô∏è‚É£ Then Spring checks all the setter methods of Car.
  In Car, we have:
     private Specification specification;
     public void setSpecification(Specification specification) { ... }
     So Spring looks for a bean with id matching the property name ‚Äî here property name is specification.

 3Ô∏è‚É£ In XML, we have:
     <bean id="specification" class="com.autowire.name.Specification">
     Since bean id specification matches the property name, Spring automatically injects it by calling setSpecification().

 4  Ô∏è‚É£ Now myCar is fully initialized with Specification object.

 5Ô∏è‚É£ Then calling:
     myCar.display();
     prints the Specification details using toString().

# Key Rule:
    * In byName autowiring, property name in class ‚ûî should match ‚ûî bean id in XML.
    * No need to manually write <property> tag when using autowire="byName"


___Spring Autowire byType___

Concept:
autowire="byType" automatically wires dependencies based on matching type (class/interface) of the property, not name.

How byType works step-by-step:
1Ô∏è‚É£ You call:
Car myCar = (Car) context.getBean("myCar");
Spring creates bean myCar (of class Car).

# Spring scans all properties of Car class
Properties = private fields with setter methods.
 For each property:
Spring reads the setter method parameter type ‚Üí here: Specification.

2Ô∏è3‚É£ Spring checks all the setter methods (or fields) of Car for dependencies.
In Car:
private Specification specification;
public void setSpecification(Specification specification) { ... }

4Ô∏è‚É£ Spring now tries to find a matching bean:
Looks into all beans defined in XML.

Looks for beans where class type == Specification (fully qualified).

In your XML:
<bean id="specification" class="com.autowire.type.Specification">
 Type Specification matches(com.autowire.type.Specification). Spring automatically injects it into Car by calling setSpecification().
5Ô∏è‚É£ Injection happens:
Calls:  setSpecification(<bean instance of Specification>)
        Property gets injected.

5Ô∏è‚É£ If you had written:
<bean id="specification2" class="com.autowire.type.Specification">
üëâ It would still work because Spring looks at type, not id ,name.

‚úÖ Key Rule:
In autowire="byType", bean id is not important. Spring matches by property type (class/interface).
There must be exactly one bean of that type.

‚úÖ When byType fails:
If there are multiple beans of the same type, Spring throws exception:
NoUniqueBeanDefinitionException
You need to resolve conflicts manually (usually via @Qualifier annotation in annotations-based config).


# Spring Autowire constructor
Concept:
autowire="constructor" automatically injects dependencies using the constructor based on constructor argument types.

How constructor autowire works step-by-step:
1Ô∏è‚É£ Spring creates instance of myCar bean:
    <bean id="myCar" class="com.autowire.constructor.Car" autowire="constructor" />
    Spring sees autowire="constructor".

2Ô∏è‚É£ Spring checks all constructors of Car class.
    public class Car {
        private Specification specification;

        public Car(Specification specification) {
            this.specification = specification;
        }
        public void display() {
            System.out.println("Car Details : " + specification.toString());
        }
    }
There is only one constructor ‚Üí Spring knows it needs to inject Specification.

3Ô∏è‚É£ Spring searches for a bean whose type matches Specification:
    <bean id="specification" class="com.autowire.constructor.Specification">
        <property name="make" value="Jeep" />
        <property name="model" value="Compass" />
    </bean>
‚úÖ Found one matching bean of type Specification.

4Ô∏è‚É£ Spring creates Car object using:
new Car(specificationBean)

‚úÖ Key Rule:
In autowire="constructor", Spring:
    Looks at constructor argument types.
    Matches with beans of same type.
    Ignores property names or setter methods.
    Ignores bean id (id can be anything).

‚úÖ When constructor autowire fails:
If multiple beans of same type exist, Spring throws:
    NoUniqueBeanDefinitionException
    Because Spring is confused which bean to inject.

    #Summary Sentence:
        autowire="constructor" matches constructor parameter types with bean types to inject automatically.

| Aspect               | `byName`      | `byType`      | `constructor`             |
| -------------------- | ------------- | ------------- | ------------------------- |
| Match based on       | Property name | Property type | Constructor argument type |
| Setter required?     | Yes           | Yes           | No                        |
| Constructor used?    | No            | No            | Yes                       |
| Bean id important?   | Yes           | No            | No                        |
| When multiple beans? | Name decides  | Error         | Error                     |
